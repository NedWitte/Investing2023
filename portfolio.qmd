---
title: "My personal portfolio"
author: "JNW"
description: "stuff"
date: "2023-08-10"
image: sp500.png

---

**The KarambolageNed portfolio**

# Introduction

This **portfolio** consist of a maximum of 100 values whereas the top 15 stock should compromise at least 40% of the total value.

```{r}
#| echo: false
#| output: false
#| include: false

#load packages
library(tidyquant)
library(quantmod)
library(ggplot2)
library(tidyverse)
library(tidyquant)
library(plotly)
library(readxl)
library(gt)
```

```{r}
 
#| echo: false
#| output: false
#| include: false


#get dividends
#get data from the Google sheets 
portfolio_df <- read_excel("data/2023_08_NedPortfolio.xlsx")
portfolio_df <- portfolio_df%>% filter(!is.na(Kaufkurs))
portfolio_df$real_time_price_EUR <- NA
portfolio_df$real_time_worth_EUR <- NA
portfolio_df$Wertunterschied <- NA


#get transition course 
# Define the currency pair
currency_pair <- "EUR/USD"

# Retrieve the exchange rate data
currency_pair <- "EUR/USD"
start_date <- Sys.Date() - 1  # Get data for yesterday
end_date <- Sys.Date()

# Retrieve the exchange rate data
getFX(currency_pair, from = start_date, to = end_date)
exchange_rate_data_today <- as.vector(EURUSD$EUR.USD[1]) #EUR/USD

for(i in 1:nrow(portfolio_df)) {
   
  if(is.na(portfolio_df$Yahoo_3_letter[i])) next
  x1 <- tq_get("SSUN.F", get = "stock.prices", from = start_date, to = end_date)
  
  x1 <- tq_get(portfolio_df$Yahoo_3_letter[i], get = "stock.prices", from = start_date, to = end_date)
  x1 <- x1$close
  if(portfolio_df$currency[i] == "EUR") {portfolio_df$real_time_price_EUR[i] <- x1}
  if(portfolio_df$currency[i] == "USD") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today} 
portfolio_df$real_time_worth_EUR[i] <- as.numeric(portfolio_df$Stück[i])*portfolio_df$real_time_price_EUR[i]
portfolio_df$Einstandswert[i] <- as.numeric(portfolio_df$Stück[i])*portfolio_df$Kaufkurs[i]
portfolio_df$Wertunterschied[i] <- portfolio_df$real_time_worth_EUR[i]-portfolio_df$Einstandswert[i]
}


```

```{r}
#| echo: false
#| output: false
#| include: false


#prepare figure to plot
# Create a pie chart
pie_chart <- plot_ly(
  data = portfolio_df,
  labels =portfolio_df$ Wertpapier,
  values = portfolio_df$`%-Anteil`,
  type = "pie"
) %>% layout(
  title = "Portfolio Distribution",
  showlegend = FALSE  # This removes the legend
)

# Display the pie chart

```

```{r}
# Display the interactive 3D pie chart
pie_chart

```

## Strategy

The strategy is easy: Safe and sound.

Generally, this portfolio has the purpose to add a signifcant amount of dividend income to the regular job income.

```{r}
#| output: true
# Display the interactive plot

```

## Market Events and Performance

Calculating the performance is tough since the money invested changes from to month due to the additional savings etc.

## Long term predictions

For this point, I want to demonstrate two scenarios:

-1. scenario: weak outlook and an average growth of 3% while adding 10k per year

-2. scenario: perfect wealth generation conditions with a growth of 10% while adding 10k per year

Let's take a look at both:

1.  scenario: growth 3% p.a., 10k additional investment from the job income

```{r}
#paste0(print("In year 2023 the portfolio has an income of 180k. Today the value is", as.character(round(sum(x),3)), "k"))
```

2.  scenario: growth 10% p.a. + 10k additional investment from job income

This is the best case scenario.

## Additional thoughts

The goal is not retire as fast as possible. Live without work is damn boring.


## Portfolio as table 


```{r}
#| echo: false
#| output: false
#| include: false

#install.packages("gtExtras")
#length(ls.str('package:gtExtras', mode='function'))
library(gtExtras)
library(tidyverse)
library(gt)

```

```{r}
#| echo: false
#| output: true
#| include: true
#| warning: false

portfolio_df %>%
  select(Wertpapier, Kurs, Kaufkurs, Wert, Notiz) %>%
  mutate_at(vars(Kurs,Wert, Kaufkurs), ~ round(., 2)) %>%
  gt() %>%
  tab_header(title = "Portfolio as Table", subtitle = "Price in EUR instead of USD") %>%
  cols_label(Wertpapier = "Identifier", Wert = "Value",  Kurs = "Current Price", Kaufkurs = "Buying Price") 


```

