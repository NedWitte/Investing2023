---
title: "My personal portfolio"
author: "JNW"
description: "The visualization of the KarambolageNedInvest portfolio"
date: "2023-08-10"
---

**The KarambolageNed portfolio**

# Introduction

This **portfolio** consist of a maximum of 100 values whereas the top 15 stock should compromise at least 40% of the total value.

```{r}
#| echo: false
#| output: false
#| include: false

rm(list = ls())

#load packages
library(tidyquant)
library(quantmod)
library(ggplot2)
library(tidyverse)
library(tidyquant)
library(plotly)
library(readxl)
library(gt)
library(reshape)
```

```{r}
#| warning: false
#| echo: false
#| output: false
#| include: false

#get dividends
#get data from the Google sheets 
portfolio_df <- read_excel("data/2023_08_NedPortfolio.xlsx")
portfolio_df <- portfolio_df%>% filter(!is.na(Kaufkurs))
portfolio_df$real_time_price_EUR <- NA
portfolio_df$real_time_worth_EUR <- NA
portfolio_df$Wertunterschied <- NA
portfolio_df$real_time_price_local_currency <- NA

#get transition course 
# Define the currency pair
start_date <- Sys.Date() - 1  # Get data for yesterday
end_date <- Sys.Date()

# Retrieve the exchange rate data
getFX("EUR/USD", from = start_date, to = end_date)
exchange_rate_data_today_EUR_USD <- as.vector(EURUSD$EUR.USD[1]) #EUR/USD
getFX("EUR/CHF", from = start_date, to = end_date)
exchange_rate_data_today_EUR_CHF <- as.vector(EURCHF$EUR.CHF[1]) #EUR/CHF
getFX("EUR/GBP", from = start_date, to = end_date)
exchange_rate_data_today_EUR_GBP <- as.vector(EURGBP$EUR.GBP[1]) #EUR/GBp
getFX("EUR/AUD", from = start_date, to = end_date)
exchange_rate_data_today_EUR_AUD <- as.vector(EURAUD$EUR.AUD[1]) #EUR/AUD
getFX("EUR/CNY", from = start_date, to = end_date)
exchange_rate_data_today_EUR_CNY <- as.vector(EURCNY$EUR.CNY[1]) #EUR/CNY
getFX("EUR/HKD", from = start_date, to = end_date)
exchange_rate_data_today_EUR_HKD <- as.vector(EURHKD$EUR.HKD[1]) #EUR/HKD
getFX("EUR/SGD", from = start_date, to = end_date)
exchange_rate_data_today_EUR_SGD <- as.vector(EURSGD$EUR.SGD[1]) #EUR/SGD
getFX("EUR/NOK", from = start_date, to = end_date)
exchange_rate_data_today_EUR_NOK <- as.vector(EURNOK$EUR.NOK[1]) #EUR/NOK


#loop
for(i in 1:nrow(portfolio_df)) {
   
  if(is.na(portfolio_df$Yahoo_3_letter[i])) next
  
  x1 <- tq_get(portfolio_df$Yahoo_3_letter[i], get = "stock.prices", from = start_date, to = end_date)
  x1 <- x1$adjusted

  portfolio_df$real_time_price_local_currency[i] <- x1
  
  if(portfolio_df$currency[i] == "EUR") {portfolio_df$real_time_price_EUR[i] <- x1}
  if(portfolio_df$currency[i] == "USD") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_USD} #USD
  if(portfolio_df$currency[i] == "CHF") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_CHF}
  if(portfolio_df$currency[i] == "GBP") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_GBP} 
  if(portfolio_df$currency[i] == "CNY") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_CNY} 
  if(portfolio_df$currency[i] == "SGD") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_SGD} 
  if(portfolio_df$currency[i] == "AUD") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_AUD} 
  if(portfolio_df$currency[i] == "NOK") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_NOK} 

#corrections
portfolio_df$real_time_price_EUR[39] <- portfolio_df$real_time_price_EUR[39]/1000  #BP
  
portfolio_df$real_time_worth_EUR[i] <- as.numeric(portfolio_df$Stück[i])*portfolio_df$real_time_price_EUR[i]
portfolio_df$Einstandswert[i] <- as.numeric(portfolio_df$Stück[i])*portfolio_df$Kaufkurs[i]
portfolio_df$Wertunterschied[i] <- portfolio_df$real_time_worth_EUR[i]-portfolio_df$Einstandswert[i]

}

x1 <- sum(portfolio_df$real_time_worth_EUR, na.rm = TRUE)

for(i in 1:nrow(portfolio_df)) {
  
portfolio_df$`%-Anteil`[i] <- (portfolio_df$real_time_worth_EUR[i]/x1)*100 #100 for %

}

```


```{r}
#| echo: false
#| output: false
#| include: false

#
#pie_chart <- plot_ly(
  #data = portfolio_df,
  #labels = ~ifelse(`%-Anteil` > 1, Wertpapier, ""),
  #values = ~`%-Anteil`,
  #type = "pie",
  #marker = list(line = list(width = 0), textposition = "outside"))  # Adjust textposition to "outside"
  #%>% layout(
  #title = "Portfolio Distribution",
  #showlegend = FALSE)  # This removes the legend


treemap_chart <- plot_ly(
  data = portfolio_df,
  ids = ~Wertpapier,
  labels = ~Wertpapier,
  parents = ~"Portfolio",  # Set a common parent for all entries
  values = ~`%-Anteil`,
  type = "treemap"
) %>% layout(
  title = "Portfolio Distribution (Treemap)",
  margin = list(l = 0, r = 0, b = 0, t = 40)  # Adjust the margin for better visibility
)



```

```{r}
#| echo: false
# Display the interactive 3D pie chart
#pie_chart
treemap_chart

```

## Market Events and Performance

For this point, here we assume that all values were bought at the same time. Doing this plot, there is some difficulties aligning all the stock data since some downloaded data has many missing values.






