---
title: "My personal portfolio"
author: "JNW"
description: "The visualization of the KarambolageNedInvest portfolio"
date: "2023-08-10"
---

**The KarambolageNed portfolio**

# Introduction
  
This **portfolio** consist of a maximum of 100 values whereas the top 15 stock should compromise at least 40% of the total value.

```{r}
#| echo: false
#| output: false
#| include: false

#load packages
library(tidyquant)
library(quantmod)
library(ggplot2)
library(tidyverse)
library(tidyquant)
library(plotly)
library(readxl)
library(gt)
library(reshape)
```

```{r}
#| warning: false
#| echo: false
#| output: false
#| include: false

#get dividends
#get data from the Google sheets 
portfolio_df <- read_excel("data/2023_08_NedPortfolio.xlsx")
portfolio_df <- portfolio_df%>% filter(!is.na(Kaufkurs))
portfolio_df$real_time_price_EUR <- NA
portfolio_df$real_time_worth_EUR <- NA
portfolio_df$Wertunterschied <- NA
portfolio_df$real_time_price_local_currency <- NA

#get transition course 
# Define the currency pair
start_date <- Sys.Date() - 1  # Get data for yesterday
end_date <- Sys.Date()

# Retrieve the exchange rate data
getFX("EUR/USD", from = start_date, to = end_date)
exchange_rate_data_today_EUR_USD <- as.vector(EURUSD$EUR.USD[1]) #EUR/USD
getFX("EUR/CHF", from = start_date, to = end_date)
exchange_rate_data_today_EUR_CHF <- as.vector(EURCHF$EUR.CHF[1]) #EUR/CHF
getFX("EUR/GBP", from = start_date, to = end_date)
exchange_rate_data_today_EUR_GBP <- as.vector(EURGBP$EUR.GBP[1]) #EUR/GBp
getFX("EUR/AUD", from = start_date, to = end_date)
exchange_rate_data_today_EUR_AUD <- as.vector(EURAUD$EUR.AUD[1]) #EUR/AUD
getFX("EUR/CNY", from = start_date, to = end_date)
exchange_rate_data_today_EUR_CNY <- as.vector(EURCNY$EUR.CNY[1]) #EUR/CNY
getFX("EUR/HKD", from = start_date, to = end_date)
exchange_rate_data_today_EUR_HKD <- as.vector(EURHKD$EUR.HKD[1]) #EUR/HKD
getFX("EUR/SGD", from = start_date, to = end_date)
exchange_rate_data_today_EUR_SGD <- as.vector(EURSGD$EUR.SGD[1]) #EUR/SGD
getFX("EUR/NOK", from = start_date, to = end_date)
exchange_rate_data_today_EUR_NOK <- as.vector(EURNOK$EUR.NOK[1]) #EUR/NOK


#loop
for(i in 1:nrow(portfolio_df)) {
   
  if(is.na(portfolio_df$Yahoo_3_letter[i])) next
  
  x1 <- tq_get(portfolio_df$Yahoo_3_letter[i], get = "stock.prices", from = start_date, to = end_date)
  x1 <- x1$adjusted

  portfolio_df$real_time_price_local_currency[i] <- x1
  
  if(portfolio_df$currency[i] == "EUR") {portfolio_df$real_time_price_EUR[i] <- x1}
  if(portfolio_df$currency[i] == "USD") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_USD} #USD
  if(portfolio_df$currency[i] == "CHF") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_CHF}
  if(portfolio_df$currency[i] == "GBP") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_GBP} 
  if(portfolio_df$currency[i] == "CNY") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_CNY} 
  if(portfolio_df$currency[i] == "SGD") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_SGD} 
  if(portfolio_df$currency[i] == "AUD") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_AUD} 
  if(portfolio_df$currency[i] == "NOK") {portfolio_df$real_time_price_EUR[i] <- x1/exchange_rate_data_today_EUR_NOK} 

#corrections
portfolio_df$real_time_price_EUR[39] <- portfolio_df$real_time_price_EUR[39]/1000  #BP
  
portfolio_df$real_time_worth_EUR[i] <- as.numeric(portfolio_df$Stück[i])*portfolio_df$real_time_price_EUR[i]
portfolio_df$Einstandswert[i] <- as.numeric(portfolio_df$Stück[i])*portfolio_df$Kaufkurs[i]
portfolio_df$Wertunterschied[i] <- portfolio_df$real_time_worth_EUR[i]-portfolio_df$Einstandswert[i]

}

x1 <- sum(portfolio_df$real_time_worth_EUR, na.rm = TRUE)

for(i in 1:nrow(portfolio_df)) {
  
portfolio_df$`%-Anteil`[i] <- (portfolio_df$real_time_worth_EUR[i]/x1)*100

}

```

```{r}
#| echo: false
#| output: false
#| include: false


#prepare figure to plot
# Create a pie chart
pie_chart <- plot_ly(
  data = portfolio_df,
  labels = portfolio_df$Wertpapier,
  values = portfolio_df$`%-Anteil`,
  type = "pie",
  marker = list(line = list(width = 0))
) %>% layout(
  title = "Portfolio Distribution",
  showlegend = FALSE  # This removes the legend
)

# Display the pie chart

```

```{r}
#| echo: false
# Display the interactive 3D pie chart
pie_chart

```

## Strategy

The strategy is easy: Safe and sound.

Generally, this portfolio has the purpose to add a signifcant amount of dividend income to the regular job income.

```{r}
#| output: true
#| echo: false
# Display the interactive plot

```

## Market Events and Performance



```{r}
#| warning: false
#| echo: false
#| output: false
#| include: false

#get transition course 
# Define the currency pair
start_date <- 2017-09-01  # Get data for yesterday
end_date <- Sys.Date()

df_portfolio_performance <- getSymbols(portfolio_df$Yahoo_3_letter[i], src = "yahoo", from = start_date, to = end_date,auto.assign = FALSE)
df_portfolio_performance <- as.data.frame(df_portfolio_performance)
df_portfolio_performance$date <- rownames(df_portfolio_performance)
df_portfolio_performance <- df_portfolio_performance %>% select(date)

#loop
for(i in 1:nrow(portfolio_df)) {
   
  if(is.na(portfolio_df$Yahoo_3_letter[i])) next
  
  x1 <- getSymbols(portfolio_df$Yahoo_3_letter[i], src = "yahoo", from = start_date, to = end_date,auto.assign = FALSE)
  x1 <- as.data.frame(x1[,6])
  x1$date <- rownames(x1)
  colnames(x1)[1] <- as.character(portfolio_df$Yahoo_3_letter[i])
  
  #combine with left_join
  df_portfolio_performance <- left_join(df_portfolio_performance, x1, by = "date")
  
}
 


```




```{r}
#| echo: false
#| output: false
#| include: false



```




Calculating the performance is tough since the money invested changes from to month due to the additional savings etc.

## Long term predictions

For this point, I want to demonstrate two scenarios:

-1. scenario: weak outlook and an average growth of 3% while adding 10k per year

-2. scenario: perfect wealth generation conditions with a growth of 10% while adding 10k per year

-3. scenario: once 200k accumulation and 5% growth

Let's take a look at both:

```{r}
#| echo: false
#| output: false
#| include: false

# Create a vector of years from 1 to n (where n is the number of years you want to calculate)
years <- 0:30  # You can adjust this to the number of years you want

# Calculate the values for each year based on the growth rate and additional amount
initial_amount <- 200000
growth_rate_1 <- 0.03  # 3% expressed as a decimal
growth_rate_2 <- 0.05  # 3% expressed as a decimal
growth_rate_3 <- 0.10  # 3% expressed as a decimal

additional_amount <- 10000

# Calculate the values for each year
values_1 <- initial_amount * (1 + growth_rate_1)^years + additional_amount * years
values_2 <- initial_amount * (1 + growth_rate_2)^years + additional_amount * years
values_3 <- initial_amount * (1 + growth_rate_3)^years + additional_amount * years


# Create a dataframe
growth_df <- data.frame(Year = years, Value_1 = values_1, 
                        Value_2 = values_2, 
                        Value_3 = values_3)

# Create a line plot using Plotly
plot <- plot_ly(growth_df, x = ~Year, type = 'scatter', mode = 'lines') %>%
  add_trace(y = ~Value_1, name = 'Scenario 1', text = ~paste("Year: ", Year, "<br>Value: EUR", round(Value_1, 0))) %>%
  add_trace(y = ~Value_2, name = 'Scenario 2', text = ~paste("Year: ", Year, "<br>Value: EUR", round(Value_2, 0))) %>%
  add_trace(y = ~Value_3, name = 'Scenario 3', text = ~paste("Year: ", Year, "<br>Value: EUR", round(Value_3, 0))) %>%
  layout(title = "Investment Growth Over Time with 3 different scenarios",
         xaxis = list(title = "Year after Initial investment"),
         yaxis = list(title = "Investment Value"))


```

```{r}
#| output: true
#| echo: false
# Display the interactive plot
plot

```
Looking at this plot, I realized two things: First, an initial investment of 200k makes you a millionaire most likely over 30 years(with inflation adjustment most likely nothing special). And secondly, stock return and higher growth rate (green) outcompetes a lower performance and additional investments (orange line).


```{r}
#| output: true
#| echo: false
#| warning: false
# Display the interactive plot
plot

```



## Additional thoughts

The goal is not retire as fast as possible. Live without work is damn boring.

## Portfolio as table

```{r}
#| echo: false
#| output: false
#| include: false

#install.packages("gtExtras")
#length(ls.str('package:gtExtras', mode='function'))
library(gtExtras)
library(tidyverse)
library(gt)

```

```{r}
#| echo: false
#| output: true
#| include: true
#| warning: false

portfolio_df %>%
  select(Wertpapier, real_time_price_EUR, Kaufkurs, real_time_worth_EUR, Notiz) %>%
  mutate_at(vars(real_time_price_EUR, Kaufkurs, real_time_worth_EUR), ~ round(., 2)) %>%
  gt() %>%
  tab_header(title = "Portfolio as Table", subtitle = "Price in EUR instead of USD") %>%
  cols_label(Wertpapier = "Identifier", real_time_worth_EUR = "Value",  real_time_price_EUR = "Current Price", Kaufkurs = "Buying Price") 


```



